include "include/MLG user interface.pixih"
include "include/MLG easy programming.pixih"
include "include/Game functions.pixih"

GUI_SCALE=sqrt(WINDOW_XSIZE*WINDOW_XSIZE+WINDOW_YSIZE*WINDOW_YSIZE)/sqrt(1920*1920+1080*1080)

meter_size=10
ball_size=.5
atmosphere_height=200
gravity=9.8
press_gravity=gravity*8
physics_update_frequency=1000
particles_update_frequency=1000

generation_size=2000
generation_chunk_size=150
generation_start_speed=8
generation_acceleration=.005
generation_damping=.98

star_count=1000

camera_offset_x=.5
camera_offset_y=0
camera_resize_time=500
camera_normal_scale=100*GUI_SCALE/meter_size
camera_normal_x=.5
camera_normal_y=0
camera_higher1_scale=25*GUI_SCALE/meter_size
camera_higher1_x=.5
camera_higher1_y=.5
camera_higher2_scale=12.5*GUI_SCALE/meter_size
camera_higher2_x=.5
camera_higher2_y=.5
camera_faster=100
camera_faster_scale=50*GUI_SCALE/meter_size
camera_faster_x=.5
camera_faster_y=-.5
camera_slower=-10
camera_scale=camera_normal_scale
menu_camera_y=-atmosphere_height-WINDOW_YSIZE div 2/meter_size/camera_scale
camera_x=camera_offset_x*WINDOW_XSIZE div 2/meter_size/camera_scale
camera_y=menu_camera_y

texture_stars=new(WINDOW_XSIZE, WINDOW_YSIZE)
clean(texture_stars)
texture_halo=load("share/halo.png")
set_flags(texture_halo, GL_MIN_LINEAR|GL_MAG_LINEAR|GL_NICEST)

/**
 * \brief Particles structure.
 * \param 0 type of particle.
 * \param 1 x.
 * \param 2 y.
 * \param 3 rotation.
 * \param 4 size.
 * \param 5 x speed.
 * \param 6 y speed.
 * \param 7 rotation speed.
 * \param 8 timestamp in physic frames.
 * \param 9 time of life in physic frames.
 * \param 10 is drawable.
 * \param 11 x calculated for rendering.
 * \param 12 y calculated for rendering.
 * \param 13 rotation calculated for rendering.
 * \param 14 size calculated for rendering.
 * \param 15 calculated color.
 * \param 16 calculated transparency.
 */
particles=new(17, 1024, FLOAT)
clean(particles)
particles_index=0
first_time=1
fn gl_callback()
{
	time=get_timer()
	set_screen(GL_SCREEN)
	if scene
	{
		while (generation_x/*+generation_chunk_size*/)*camera_scale<WINDOW_XSIZE div 2+camera_x*meter_size*camera_scale
		{
			if generation_x-generation_offset+generation_chunk_size>=generation_size
			{
				copy(generation, generation, 0, generation_chunk_size, generation_size)
				generation_offset+generation_chunk_size
			}
			generation_speed=(rand()-16384)/32768*(generation_start_speed+generation_x/meter_size*generation_acceleration)
			while generation_next_y+generation_speed>=200||generation_next_y+generation_speed<-100
			{
				generation_speed=(rand()-16384)/32768*(generation_start_speed+generation_x/meter_size*generation_acceleration)
			}
			generation_next_y+generation_speed
			generation_acceleration2=2*(generation_next_y-generation_prev_y-generation_speed2*generation_chunk_size)/generation_chunk_size/generation_chunk_size
			a=0 while a!=generation_chunk_size
			{
				generation[generation_x-generation_offset+a]=generation_y
				generation_speed2+generation_acceleration2
				generation_speed2*pow(generation_damping, 100/generation_chunk_size)
				generation_y+generation_speed2
				a+1
			}
			generation_prev_y=generation_y
			logf("WTF: %d, %d\n", generation_x, generation_offset)
			generation_x+generation_chunk_size
		}
		if time<1000
		{
			camera_y=crossfade(time, menu_camera_y/2, camera_offset_y*WINDOW_XSIZE div 2/meter_size/camera_scale-1, 0, 1000, CURVE_FAST)
		}
		running_function=1
		done=0
		while done!=pow(2, THREADS)-1{}
		pixi(texture_stars, 0, 0)
		draw_particles(0b001)
		atmosphere()
		draw_particles(0b110)
		b=(generation_offset-camera_x*meter_size)*camera_scale
		c=-WINDOW_XSIZE div 2
		if b>c
		{
			a=b
		}
		else
		{
			a=c
		}
		while a<WINDOW_XSIZE div 2
		{
			b=a/camera_scale+camera_x*meter_size-generation_offset
			if generation[b]<atmosphere_height+1
			{
				fbox(a, (crossfade(b, generation[b], generation[b+1], floor(b), 1, CURVE_LINEAR)-camera_y)*meter_size*camera_scale, 4, WINDOW_YSIZE div 2-(crossfade(b, generation[b], generation[b+1], floor(b), 1, CURVE_LINEAR)-camera_y)*meter_size*camera_scale, #000000)
			}
			a+4
		}
		if !crashed
		{
			draw_ball(255, 0, 0, 255)
		}
		sprintf(0, "%d FPS.\nDistance: %f.\nSpeed: %f.\nGrounded: %d.", FPS, x, sqrt(speed_x*speed_x+speed_y*speed_y), grounded)
		print(0, -WINDOW_XSIZE div 2, -WINDOW_YSIZE div 2, #008080, TOP|LEFT)
		while particles_frames!=floor(time/1000*particles_update_frequency)
		{
			if floor(rand()/32768*.125*pow(meter_size*camera_scale/100, 2)*particles_update_frequency)==0
			{
				new_particle(crossfade(rand(), -WINDOW_XSIZE, WINDOW_XSIZE, 0, 32768, CURVE_LINEAR)/meter_size/camera_scale+camera_x, crossfade(rand(), -WINDOW_YSIZE, WINDOW_YSIZE, 0, 32768, CURVE_LINEAR)/meter_size/camera_scale+camera_y, 0, 0)
			}
			if y>=-200
			{
				if sqrt(speed_x*speed_x+speed_y*speed_y)>=300
				{
					new_particle(x, y, 2, 0)
				}
				else{if sqrt(speed_x*speed_x+speed_y*speed_y)>=100
				{
					new_particle(x, y, 1, 0)
				}}
			}
			while physic_frames!=floor(particles_frames/particles_update_frequency*physics_update_frequency)
			{
				if time>=1000&&!crashed
				{
					collide=0
					a=0 while a!=17
					{
						offset_x=x+cos(a/16*M_PI)*ball_size/2
						offset_y=y+sin(a/16*M_PI)*ball_size/2
						b=offset_x*meter_size-generation_offset
						if b>=0
						{
							generation_under_ball=crossfade(b, generation[b], generation[b+1], floor(b), 1, CURVE_LINEAR)
							if generation_under_ball<atmosphere_height+1
							{
								if offset_y>=generation_under_ball
								{
									vector_angle=get_vector_angle(1/meter_size, generation[b+1]-generation[b])
									vector_x=speed_x*cos(-vector_angle)-speed_y*sin(-vector_angle)
									vector_y=speed_y*cos(-vector_angle)+speed_x*sin(-vector_angle)
									if vector_y>=50
									{
										c=0 while c!=64
										{
											new_particle(x, y, 2, 2)
											c+1
										}
										crashed=0//1
										//camera_x=x+6/camera_scale
										//camera_y=y+3/camera_scale
									}
									else{if vector_y>=10
									{
										c=0 while c!=64
										{
											new_particle(x, y, 2, 1)
											c+1
										}
									}}
									vector_y*-.1
									speed_x=vector_x*cos(vector_angle)-vector_y*sin(vector_angle)
									speed_y=vector_y*cos(vector_angle)+vector_x*sin(vector_angle)
									//b=offset_x*meter_size-generation_offset
									//generation_under_ball=crossfade(b, generation[b], generation[b+1], floor(b), 1, CURVE_LINEAR)
									c=(generation_under_ball-offset_y)*cos(vector_angle)
									x-c*sin(vector_angle)
									y+c*cos(vector_angle)
									collide=1
									grounded=1
								}
							}
						}
						a+1
					}
					if !collide&&grounded
					{
						if sqrt(speed_x*speed_x+speed_y*speed_y)>=camera_faster
						{
							pre_resize_camera()
							faster=1
						}
						grounded=0
					}
					if grounded&&ball_acceleration&&acceleration
					{
						speed_x+64/physics_update_frequency
					}
					x+speed_x/physics_update_frequency
					y+speed_y/physics_update_frequency
					if !crashed
					{
						if camera_slower<speed_y
						{
							faster=0
						}
						if faster
						{
							resize_camera(camera_faster_x, camera_faster_y, camera_faster_scale)
						}
						else{if generation_offset-x*meter_size<0&&generation_under_ball<atmosphere_height+1
						{
							if generation_under_ball-y>=(WINDOW_YSIZE div 2+WINDOW_YSIZE*0)/20/GUI_SCALE
							{
								if higher!=2
								{
									pre_resize_camera()
									higher=2
								}
								resize_camera(camera_higher2_x, camera_higher2_y, camera_higher2_scale)
							}
							else{if generation_under_ball-y>=WINDOW_YSIZE div 2/100/GUI_SCALE
							{
								if higher!=1
								{
									pre_resize_camera()
									higher=1
								}
								resize_camera(camera_higher1_x, camera_higher1_y, camera_higher1_scale)
							}
							else
							{
								if higher
								{
									pre_resize_camera()
									higher=0
								}
								resize_camera(camera_normal_x, camera_normal_y, camera_normal_scale)
							}}
						}
						else
						{
							if higher!=2
							{
								pre_resize_camera()
								higher=2
							}
							resize_camera(camera_higher2_x, camera_higher2_y, camera_higher2_scale)
						}}
						camera_speed_x+1000*(x+camera_offset_x*WINDOW_XSIZE div 2/meter_size/camera_scale-camera_x)/physics_update_frequency
						camera_speed_x*pow(.98, 1000/physics_update_frequency)
						camera_speed_y+(1000*(y+camera_offset_y*WINDOW_YSIZE div 2/meter_size/camera_scale-camera_y)+gravity)/physics_update_frequency
						camera_speed_y*pow(.98, 1000/physics_update_frequency)
						camera_x+camera_speed_x/physics_update_frequency
						camera_y+camera_speed_y/physics_update_frequency
						//camera_x=x+600/meter_size/camera_scale
						//camera_y=y+300/meter_size/camera_scale
					}
					if acceleration
					{
						speed_y+press_gravity/physics_update_frequency
					}
					else
					{
						speed_y+gravity/physics_update_frequency
					}
					if y>=-200
					{
						if sqrt(speed_x*speed_x+speed_y*speed_y)>=300
						{
							speed_x/pow(crossfade(y, 1, 1.0002, -atmosphere_height, atmosphere_height, CURVE_SLOW), 1000/physics_update_frequency)
							speed_y/pow(crossfade(y, 1, 1.0002, -atmosphere_height, atmosphere_height, CURVE_SLOW), 1000/physics_update_frequency)
						}
						else{if sqrt(speed_x*speed_x+speed_y*speed_y)>=100
						{
							speed_x/pow(crossfade(y, 1, 1.0001, -atmosphere_height, atmosphere_height, CURVE_SLOW), 1000/physics_update_frequency)
							speed_y/pow(crossfade(y, 1, 1.0001, -atmosphere_height, atmosphere_height, CURVE_SLOW), 1000/physics_update_frequency)
						}
						else
						{
							speed_x/pow(crossfade(y, 1, 1.00005, -atmosphere_height, atmosphere_height, CURVE_SLOW), 1000/physics_update_frequency)
							speed_y/pow(crossfade(y, 1, 1.00005, -atmosphere_height, atmosphere_height, CURVE_SLOW), 1000/physics_update_frequency)
						}}
					}
				}
				physic_frames+1
			}
			particles_frames+1
		}
	}
	else
	{
		if time<1000
		{
			while a!=floor(crossfade(time, 0, star_count, 0, 1000, CURVE_FAST))
			{
				b=floor(rand()/32768*4)
				op_cn(OP_COPY, texture_stars, SNEG, rand()/32768*(get_xsize(texture_stars)-b), rand()/32768*(get_ysize(texture_stars)-b), b+1, b+1)
				a+1
			}
			pixi(texture_stars, 0, 0)
			update_gl_data(texture_stars)
			b=crossfade(time, .5, 1, 0, 1000, CURVE_FAST)
			interface[2].y=-240/b
			interface[2].size=8/b
			interface[2].transp=crossfade(time, 0, 256, 0, 1000, CURVE_LINEAR)
			draw_GUI(GUI)
		}
		else{if time<2000
		{
			if first_time
			{
				while a!=star_count
				{
					b=floor(rand()/32768*4)
					op_cn(OP_COPY, texture_stars, SNEG, rand()/32768*(get_xsize(texture_stars)-b), rand()/32768*(get_ysize(texture_stars)-b), b+1, b+1)
					a+1
				}
				first_time=0
			}
			a=crossfade(time, 1/8, 1, 1000, 1000, CURVE_FAST)
			bind(interface[0], GUI)
			interface[0].x=-200/a
			interface[0].y=-100/a
			interface[0].width=400/a
			interface[0].height=200/a
			interface[0].title.size=4/a
			interface[0].transp=crossfade(time, 0, 256, 1000, 1000, CURVE_LINEAR)
			bind(interface[1], GUI)
			interface[1].x=-300/a
			interface[1].y=150/a
			interface[1].width=100/a
			interface[1].height=100/a
			interface[1].title.size=4/a
			interface[1].transp=interface[0].transp
			interface[2].y=-240
			interface[2].size=8
			interface[2].transp=255
			bind(interface[3], GUI)
			interface[3].x=crossfade(time, 300, -150, 1000, 1000, CURVE_FAST)
			interface[3].transp=crossfade(time, 0, 256, 1000, 1000, CURVE_SLOW)
			pixi(texture_stars, 0, 0)
			draw_GUI(GUI)
		}
		else
		{
			running_function=1
			done=0
			while done!=(1<<THREADS)-1{}
			if !scene_cross
			{
				if a!=1
				{
					interface[0].x=-200
					interface[0].y=-100
					interface[0].width=400
					interface[0].height=200
					interface[0].title.size=4
					interface[0].transp=255
					interface[1].x=-300
					interface[1].y=150
					interface[1].width=100
					interface[1].height=100
					interface[1].title.size=4
					interface[1].transp=255
					interface[3].x=-150
					interface[3].transp=255
					a=1
				}
				pixi(texture_stars, 0, 0)
				draw_particles()
				atmosphere()
				if interface[1].switch_state
				{
					interface[1].title.string="v"
					interface[1].color=GREEN
				}
				else
				{
					interface[1].title.string=-1
					interface[1].color=RED
				}
				draw_GUI(GUI)
			}
			else{if time<timestamp
			{
				camera_y=crossfade(time, menu_camera_y, menu_camera_y/2, timestamp-1000, 1000, CURVE_SLOW)
				interface[0].y=-100-(camera_y-menu_camera_y)*meter_size*camera_scale
				interface[1].y=150-(camera_y-menu_camera_y)*meter_size*camera_scale
				pixi(texture_stars, 0, 0)
				draw_particles()
				atmosphere()
				interface[2].y=-240-(camera_y-menu_camera_y)*meter_size*camera_scale
				interface[3].y=200-(camera_y-menu_camera_y)*meter_size*camera_scale
				if interface[1].switch_state
				{
					interface[1].title.string="v"
					interface[1].color=GREEN
				}
				else
				{
					interface[1].title.string=-1
					interface[1].color=RED
				}
				draw_GUI(GUI)
			}}
			while particles_frames!=floor((time-2000)/1000*particles_update_frequency)
			{
				if floor(rand()/32768*.125*pow(meter_size*camera_scale/100, 2)*particles_update_frequency)==0
				{
					new_particle(crossfade(rand(), -WINDOW_XSIZE, WINDOW_XSIZE, 0, 32768, CURVE_LINEAR)/meter_size/camera_scale+camera_x, crossfade(rand(), -WINDOW_YSIZE, WINDOW_YSIZE, 0, 32768, CURVE_LINEAR)/meter_size/camera_scale+camera_y, 0, 0)
				}
				particles_frames+1
			}
		}}
	}
	set_screen(0)
}
call_threads(thread_function)
set_gl_callback(gl_callback)
while 1
{
	clean(particles)
	if scene
	{
		x=0
		y=-1
		speed_x=0
		speed_y=0
		camera_speed_x=0
		camera_speed_y=0
		timestamp=0
		higher=0
		faster=0
		grounded=0
		resize_x=.5
		resize_y=.5
		resize_scale=1
		generation=new(generation_size, 1, FLOAT)
		clean(generation, atmosphere_height+1)
		generation_offset=floor(WINDOW_XSIZE div 2/camera_scale-generation_size+camera_x*meter_size)
		generation_x=-meter_size
		generation_prev_y=0
		generation_y=0
		generation_next_y=0
		generation_speed2=0
		particles_frames=0
		physic_frames=0
		start_timer()
		while 1
		{
			frame()
			while get_event()
			{
				if EVT[EVT_TYPE]==EVT_QUIT
				{
					running_function=-1
					halt
				}
				if time>=1000
				{
					if EVT[EVT_TYPE]==EVT_MOUSEBUTTONDOWN
					{
						acceleration=1
					}
					else{if EVT[EVT_TYPE]==EVT_MOUSEBUTTONUP
					{
						acceleration=0
					}}
				}
			}
		}
		remove(generation)
	}
	else
	{
		/**
		 * I don't want to flood the name space.
		 */
		GUI=new_GUI()
		interface=new(4, 1, INT)
		interface[0]=new_button("Play", -200, -100, 400, 200, BUTTON_STANDARD)
		interface[1]=new_button(-1, -300, 150, 100, 100, BUTTON_SWITCH)
		interface[2]=new_text("SkyBounce", 0, -240, 0, 8)
		interface[3]=new_text("No acceleration.", 0, 200, 0, 4)
		interface[0].keyboard_key=KEY_ENTER
		set_button_callback(interface[0], {scene_cross=1 timestamp=time+1000}, 0)
		interface[1].color=RED
		interface[2].color=GREEN
		interface[3].text_align=LEFT
		bind(interface[2], GUI)
		particles_frames=0
		start_timer()
		while 1
		{
			frame()
			while get_event()
			{
				if time>=2000&&!scene_cross
				{
					get_button_event(interface[0])
					get_button_event(interface[1])
				}
				if EVT[EVT_TYPE]==EVT_QUIT
				{
					running_function=-1
					halt
				}
			}
			if scene_cross&&time>=timestamp
			{
				scene=1
				ball_acceleration=!interface[1].switch_state
				break
			}
		}
		remove_GUI(GUI)
		remove(interface)
	}
}