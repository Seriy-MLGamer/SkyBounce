//"MLG user interface" library v1.0.0.
//(C) Серый MLGamer, 2021.
//MIT license.


THEME_LIGHT=0
THEME_DARK= 1

WINDOW_STANDARD=0
WINDOW_DIALOG=  1
WINDOW_ALERT=   2
BUTTON_STANDARD=0
BUTTON_SWITCH=  1
BUTTON_SELECT=  2

GUI_FLAG_REMOVE_ELEMENTS= 0b1
GUI_FLAG_INHERIT_REMOVES=0b10
WINDOW_FLAG_DRAGGABLE=  0b1
WINDOW_FLAG_RESIZEABLE=0b10
WINDOW_FLAG_REMOVE_ELEMENTS= 0b1
WINDOW_FLAG_INHERIT_REMOVES=0b10
IMAGE_FLAG_REMOVE_SOURCE=0b1

MOBILE=1
COLOR_THEME=THEME_DARK
GUI_SCALE=1
WINDOW_SAFE_AREA=20

/**
 * \brief Creates a GUI container. It's useful for safe drawing and handling events of GUI elements with one call or storing GUI patterns.
 * \return A GUI container.
 * \see draw_GUI()
 * \see get_GUI_event()
 * \see remove_GUI()
 */
fn new_GUI()
{
	$gui=new()
	$gui.gui=1

	$gui.texts=new(1, 1, INT)
	clean($gui.texts, -1)
	$gui.images=new(1, 1, INT)
	clean($gui.images, -1)
	$gui.buttons=new(1, 1, INT)
	clean($gui.buttons, -1)
	$gui.windows=new(1, 1, INT)
	clean($gui.windows, -1)
	$gui.window_focus=0
	ret($gui)
}
/**
 * \brief Removes a GUI container.
 * \param gui a GUI container.
 * \param flags flags for remove.
 * \see new_GUI()
 */
fn remove_GUI($gui, $flags)
{
	if $gui>=0
	{
		if $flags&GUI_FLAG_REMOVE_ELEMENTS
		{
			$a=0 while $a<get_size($gui.windows)
			{
				remove_window($gui.windows[$a], !!($flags&GUI_FLAG_INHERIT_REMOVES)*(WINDOW_FLAG_REMOVE_ELEMENTS|WINDOW_FLAG_INHERIT_REMOVES))
				$a+1
			}
			$a=0 while $a<get_size($gui.texts)
			{
				remove_text($gui.texts[$a])
				$a+1
			}
			$a=0 while $a<get_size($gui.images)
			{
				remove_image($gui.images[$a], !!($flags&GUI_FLAG_INHERIT_REMOVES)*IMAGE_FLAG_REMOVE_SOURCE)
				$a+1
			}
			$a=0 while $a<get_size($gui.buttons)
			{
				remove_button($gui.buttons[$a])
				$a+1
			}
		}
		remove($gui.windows)
		remove($gui.texts)
		remove($gui.images)
		remove($gui.buttons)
		remove($gui)
	}
}
/**
 * \brief Creates a window GUI element. GUI elements bound to the window inherit its position.
 * \param title a text on the top of the window.
 * \param x
 * \param y
 * \param width
 * \param height
 * \param type a preset of the window.
 * \param flags flags of the window (how it should work and/or appear).
 * \return A container with window properties.
 * \see bind()
 * \see unbind()
 * \see draw_window()
 * \see get_window_event()
 * \see remove_window()
 */
fn new_window($title, $x, $y, $width, $height, $type, $flags)
{
	$window=new()
	$window.window=1

	$window.x=$x
	$window.y=$y
	$window.width=$width
	$window.height=$height
	$window.type=$type
	$window.flags=$flags

	$window.parent=-1
	$window.align=0
	$window.color=#00FFFF
	$window.transp=255
	$window.drag=0
	$window.drag_x=0
	$window.drag_y=0
	$window.texts=new(1, 1, INT)
	$window.texts[0]=new_text($title, 10, -55, $width-22, 6)
	$window.texts[0].parent=$window
	$window.texts[0].align=TOP|LEFT
	$window.texts[0].text_align=TOP|LEFT
	$window.images=new(1, 1, INT)
	clean($window.images, -1)
	$window.buttons=new(1, 1, INT)
	clean($window.buttons, -1)
	if $type==WINDOW_DIALOG
	{
		$ok=new_button("OK", -200-WINDOW_SAFE_AREA, -100-WINDOW_SAFE_AREA, 200, 100, BUTTON_STANDARD)
		if 0//strstr(LANG_NAME, "ru_")==0
		{
			$cancel=new_button("Отмена", -400-WINDOW_SAFE_AREA*2, -100-WINDOW_SAFE_AREA, 200, 100, BUTTON_STANDARD)
		}
		else
		{
			$cancel=new_button("Cancel", -400-WINDOW_SAFE_AREA*2, -100-WINDOW_SAFE_AREA, 200, 100, BUTTON_STANDARD)
		}
		$ok.align=RIGHT|BOTTOM
		$cancel.align=RIGHT|BOTTOM
		bind($ok, $window)
		bind($cancel, $window)
	}
	else{if $type==WINDOW_ALERT
	{
		$ok=new_button("OK", -200-WINDOW_SAFE_AREA, -100-WINDOW_SAFE_AREA, 200, 100, BUTTON_STANDARD)
		$ok.align=RIGHT|BOTTOM
		bind($ok, $window)
	}}
	ret($window)
}
/**
 * \brief Removes a window.
 * \param window
 * \param flags flags for remove.
 * \see unbind()
 * \see new_window()
 */
fn remove_window($window, $flags)
{
	unbind($window)
	if $window>=0
	{
		remove_text($window.texts[0])
		if $window.type==WINDOW_DIALOG
		{
			remove_button($window.buttons[0])
			remove_button($window.buttons[1])
		}
		else{if $window.type==WINDOW_ALERT
		{
			remove_button($window.buttons[0])
		}}
		if $flags&WINDOW_FLAG_REMOVE_ELEMENTS
		{
			$a=1 while $a<get_size($window.texts)
			{
				remove_text($window.texts[$a])
				$a+1
			}
			$a=0 while $a<get_size($window.images)
			{
				remove_image($window.images[$a], !!($flags&WINDOW_FLAG_INHERIT_REMOVES)*IMAGE_FLAG_REMOVE_SOURCE)
				$a+1
			}
			$a=0 while $a<get_size($window.buttons)
			{
				remove_button($window.buttons[$a])
				$a+1
			}
		}
		remove($window.texts)
		remove($window.images)
		remove($window.buttons)
		remove($window)
	}
}
/**
 * \brief Creates a text GUI element. In the difference of the default string, this element has size and inheritance of parent elements.
 * \param string a string contained by the element.
 * \param x
 * \param y
 * \param width a width of word wrap. 0 disables word wrap.
 * \param size a scale of font.
 * \return A container with text properties.
 * \see bind()
 * \see unbind()
 * \see draw_text()
 * \see remove_text()
 */
fn new_text($string, $x, $y, $width, $size)
{
	$text=new()
	$text.text=1

	$text.string=$string
	$text.x=$x
	$text.y=$y
	$text.width=$width
	$text.size=$size

	$text.parent=-1
	$text.align=0
	$text.text_align=0
	if COLOR_THEME==THEME_DARK
	{
		$text.color=#FFFFFF
	}
	else{if COLOR_THEME==THEME_LIGHT
	{
		$text.color=#000000
	}}
	$text.transp=255
	ret($text)
}
/**
 * \brief Removes a text.
 * \param text
 * \see unbind()
 * \see new_text()
 */
fn remove_text($text)
{
	unbind($text)
	if $text>=0
	{
		remove($text)
	}
}
/**
 * \brief Creates an image GUI element. This element can display pixel containers and inherits parent's position.
 * \param source a pixel container.
 * \param x
 * \param y
 * \param width
 * \param height
 * \return A container with image properties.
 * \see bind()
 * \see unbind()
 * \see draw_image()
 * \see remove_image()
 */
fn new_image($source, $x, $y, $width, $height)
{
	$image=new()
	$image.image=1

	$image.source=$source
	$image.x=$x
	$image.y=$y
	$image.width=$width
	$image.height=$height

	$image.parent=-1
	$image.align=0
	$image.color=WHITE
	$image.transp=255
	ret($image)
}
/**
 * \brief Removes an image.
 * \param image
 * \param flags flags for remove.
 * \see unbind()
 * \see new_image()
 */
fn remove_image($image, $flags)
{
	unbind($image)
	if $image>=0
	{
		if $flags&IMAGE_FLAG_REMOVE_SOURCE
		{
			remove($image.source)
		}
		remove($image)
	}
}
/**
 * \brief Creates a button GUI element. You can press this button! And, of course, it inherits parent's position.
 * \param title a text on the button.
 * \param x
 * \param y
 * \param width
 * \param height
 * \param type a type of the button (how it should work).
 * \return A container with button properties.
 * \see bind()
 * \see unbind()
 * \see draw_button()
 * \see get_button_event()
 * \see set_button_callback()
 * \see remove_button()
 */
fn new_button($title, $x, $y, $width, $height, $type)
{
	$button=new()
	$button.button=1

	$button.title=new_text($title, 0, 0, $width-2, 4)
	$button.title.parent=$button
	$button.x=$x
	$button.y=$y
	$button.width=$width
	$button.height=$height
	$button.type=$type

	$button.parent=-1
	$button.align=0
	$button.color=#00FFFF
	$button.transp=255
	$button.active=1
	$button.entered=0
	$button.pressed=0
	if $type==BUTTON_SWITCH
	{
		$button.switch_state=0
	}
	else{if $type==BUTTON_SELECT
	{
		$button.selected=0
	}}
	if !MOBILE
	{
		$button.mouse_key=KEY_MOUSE_LEFT
		$button.keyboard_key=0
	}
	$button.main_event=EVT_BUTTONUP
	$button.function=0
	$button.arguments=0
	ret($button)
}
/**
 * \brief Removes a button.
 * \param button
 * \see unbind()
 * \see new_button()
 */
fn remove_button($button)
{
	unbind($button)
	if $button>=0
	{
		remove($button.title)
		remove($button)
	}
}
/**
 * \brief Binds a GUI element to the window or GUI container.
 * \param object a GUI element.
 * \param parent a window or GUI container.
 * \see unbind()
 */
fn bind($object, $parent)
{
	if $object>=0&&$object.parent<0&&$parent>=0
	{
		$object.parent=$parent
		if $object.window
		{
			$array=$parent.windows
			if $parent.gui
			{
				$parent.window_focus=1
			}
		}
		else{if $object.text
		{
			$array=$parent.texts
		}
		else{if $object.image
		{
			$array=$parent.images
		}
		else{if $object.button
		{
			$array=$parent.buttons
		}}}}
		$a=0 while $array[$a]>=0&&$a!=get_size($array)
		{
			$a+1
		}
		if $a==get_size($array)
		{
			resize($array, get_size($array)+1)
		}
		$array[$a]=$object
	}
}
/**
 * \brief Unbinds a GUI element from its parent.
 * \param object a GUI element.
 * \see bind()
 */
fn unbind($object)
{
	if $object>=0&&$object.parent>=0
	{
		if $object.window
		{
			$array=$object.parent.windows
		}
		else{if $object.text
		{
			$array=$object.parent.texts
		}
		else{if $object.image
		{
			$array=$object.parent.images
		}
		else{if $object.button
		{
			$array=$object.parent.buttons
		}}}}
		$a=0 while $array[$a]!=$object&&$a!=get_size($array)
		{
			$a+1
		}
		if $a!=get_size($array)
		{
			$array[$a]=-1
			if $a==get_size($array)-1
			{
				while $array[$a]<0
				{
					$a-1
				}
				if $a>=0
				{
					resize($array, $a+1)
				}
				else
				{
					resize($array, 1)
					if $object.parent.gui
					{
						$object.parent.window_focus=1
					}
				}
			}
		}
		$object.parent=-1
	}
}
/**
 * \brief Binds a function to the button. Then this button can execute it by the press.
 * \param button
 * \param function put here a name of the function. 0 unbinds a function.
 * \param arguments some user-defined data for the function.
 * \see bind()
 * \see unbind()
 * \see get_button_event()
 * \see new_button()
 */
fn set_button_callback($button, $function, $arguments)
{
	if $button>=0
	{
		$button.function=$function
		$button.arguments=$arguments
	}
}
/**
 * \brief Returns an inherited x coordinate of the GUI element - its screen coordinate.
 * \param object a GUI element.
 * \return An inherited x coordinate.
 * \see bind()
 * \see unbind()
 * \see get_global_y()
 */
fn get_global_x($object)
{
	$x=$object.x*GUI_SCALE
	if $object.window
	{
		if $object.align&LEFT
		{
			$x-WINDOW_XSIZE div 2
		}
		if $object.align&RIGHT
		{
			$x+WINDOW_XSIZE div 2
		}
	}
	else{if $object.parent>=0&&!$object.parent.gui
	{
		$x+get_global_x($object.parent)
		$x+$object.parent.width*GUI_SCALE div 2
		if $object.align&LEFT
		{
			$x-$object.parent.width*GUI_SCALE div 2-1
		}
		if $object.align&RIGHT
		{
			$x+$object.parent.width*GUI_SCALE div 2-1
		}
	}
	else
	{
		if $object.align&LEFT
		{
			$x-WINDOW_XSIZE div 2
		}
		if $object.align&RIGHT
		{
			$x+WINDOW_XSIZE div 2
		}
	}}
	ret($x)
}
/**
 * \brief Returns an inherited y coordinate of the GUI element - its screen coordinate.
 * \param object a GUI element.
 * \return An inherited y coordinate.
 * \see bind()
 * \see unbind()
 * \see get_global_x()
 */
fn get_global_y($object)
{
	$y=$object.y*GUI_SCALE
	if $object.window
	{
		if $object.window.align&TOP
		{
			$y-WINDOW_YSIZE div 2
		}
		if $object.window.align&BOTTOM
		{
			$y+WINDOW_YSIZE div 2
		}
	}
	else{if $object.parent>=0&&!$object.parent.gui
	{
		$y+get_global_y($object.parent)
		$y+$object.parent.height*GUI_SCALE div 2
		if $object.align&TOP
		{
			$y-$object.parent.height*GUI_SCALE div 2-1
		}
		if $object.align&BOTTOM
		{
			$y+$object.parent.height*GUI_SCALE div 2-1
		}
	}
	else
	{
		if $object.align&TOP
		{
			$y-WINDOW_YSIZE div 2
		}
		if $object.align&BOTTOM
		{
			$y+WINDOW_YSIZE div 2
		}
	}}
	ret($y)
}
/**
 * \brief Handles events of elments bound to the GUI container. Put this function in your event loop.
 * \param gui a GUI container.
 * \see get_window_event()
 * \see get_button_event()
 * \see new_GUI()
 */
fn get_GUI_event($gui)
{
	$a=get_size($gui.windows) while $a!=0
	{
		$a-1
		if $gui.windows[$a]>=0
		{
			get_window_event($gui.windows[$a])
		}
	}
	if $gui.window_focus
	{
		$a=get_size($gui.buttons) while $a!=0
		{
			$a-1
			if $gui.buttons[$a]>=0
			{
				get_button_event($gui.buttons[$a])
			}
		}
	}
}
/**
 * \brief Handles events of the window and its bound elments. Put this function in your event loop.
 * \param window
 * \see get_GUI_event()
 * \see get_button_event()
 * \see new_window()
 */
fn get_window_event($window)
{
	$main_event=0
	if $window.parent.gui
	{
		if $window.parent.window_focus
		{
			if $window.parent.windows[get_size($window.parent.windows)-1]!=$window
			{
				ret
			}
			else
			{
				$main_event=1
			}
		}
	}
	else
	{
		$main_event=1
	}
	$x=get_global_x($window)
	$y=get_global_y($window)
	$width=$window.width*GUI_SCALE
	$height=$window.height*GUI_SCALE
	$y_border=$y-60*GUI_SCALE-1
	if !$main_event
	{
		if EVT[EVT_TYPE]==EVT_MOUSEBUTTONDOWN&&EVT[EVT_X]>=$x&&EVT[EVT_X]<$x+$width&&EVT[EVT_Y]>=$y_border&&EVT[EVT_Y]<$y+$height
		{
			$window.parent.window_focus=1
			$a=get_size($window.parent.windows)-1 while $window.parent.windows[$a]!=$window
			{
				$a-1
			}
			copy($window.parent.windows, $window.parent.windows, $a, $a+1)
			$window.parent.windows[get_size($window.parent.windows)-1]=$window
		}
		else
		{
			ret
		}
	}
	$min_width=400+WINDOW_SAFE_AREA*3+2/GUI_SCALE
	$min_height=100+WINDOW_SAFE_AREA*2+2/GUI_SCALE
	$safe_area=WINDOW_SAFE_AREA*GUI_SCALE
	if $window.flags&WINDOW_FLAG_DRAGGABLE
	{
		if EVT[EVT_KEY]==KEY_MOUSE_LEFT
		{
			if EVT[EVT_TYPE]==EVT_MOUSEBUTTONDOWN
			{
				$window.drag=1
				$window.drag_x=EVT[EVT_X]
				$window.drag_y=EVT[EVT_Y]
			}
			else{if EVT[EVT_TYPE]==EVT_MOUSEBUTTONUP
			{
				$window.drag=0
			}}
		}
		if EVT[EVT_TYPE]==EVT_MOUSEMOVE&&$window.drag
		{
			$resize=0
			if $window.flags&WINDOW_FLAG_RESIZEABLE
			{
				if $window.drag_x>=$x&&$window.drag_x<$x+$safe_area
				{
					$resize=1
					$window.x+(EVT[EVT_X]-$window.drag_x)/GUI_SCALE
					$window.width-(EVT[EVT_X]-$window.drag_x)/GUI_SCALE
					$window.drag_x=EVT[EVT_X]
					$resize_x=get_global_x($window)
					if $resize_x<-WINDOW_XSIZE div 2
					{
						$window.x-($resize_x+WINDOW_XSIZE div 2)/GUI_SCALE
						$window.width+($resize_x+WINDOW_XSIZE div 2)/GUI_SCALE
						$window.drag_x-$resize_x+WINDOW_XSIZE div 2
					}
					else{if $window.width<$min_width
					{
						$window.x+$window.width-$min_width
						$window.drag_x+($window.width-$min_width)*GUI_SCALE
						$window.width=$min_width
					}}
				}
				if $window.drag_y>=$y_border&&$window.drag_y<$y_border+$safe_area
				{
					$resize=1
					$window.y+(EVT[EVT_Y]-$window.drag_y)/GUI_SCALE
					$window.height-(EVT[EVT_Y]-$window.drag_y)/GUI_SCALE
					$window.drag_y=EVT[EVT_Y]
					$resize_y=get_global_y($window)-60*GUI_SCALE-1
					if $resize_y<-WINDOW_YSIZE div 2
					{
						$window.y-($resize_y+WINDOW_YSIZE div 2)/GUI_SCALE
						$window.height+($resize_y+WINDOW_YSIZE div 2)/GUI_SCALE
						$window.drag_y-$resize_y+WINDOW_YSIZE div 2
					}
					else{if $window.height<$min_height
					{
						$window.y+$window.height-$min_height
						$window.drag_y+($window.height-$min_height)*GUI_SCALE
						$window.height=$min_height
					}}
				}
				if $window.drag_x>=$x+$width-$safe_area&&$window.drag_x<$x+$width
				{
					$resize=1
					$window.width+(EVT[EVT_X]-$window.drag_x)/GUI_SCALE
					$window.drag_x=EVT[EVT_X]
					if $window.width*GUI_SCALE+$x>WINDOW_XSIZE div 2
					{
						$window.drag_x+WINDOW_XSIZE div 2-$x-$window.width*GUI_SCALE
						$window.width=(WINDOW_XSIZE div 2-$x)/GUI_SCALE
					}
					else{if $window.width<$min_width
					{
						$window.drag_x+($min_width-$window.width)*GUI_SCALE
						$window.width=$min_width
					}}
				}
				if $window.drag_y>=$y+$height-$safe_area&&$window.drag_y<$y+$height
				{
					$resize=1
					$window.height+(EVT[EVT_Y]-$window.drag_y)/GUI_SCALE
					$window.drag_y=EVT[EVT_Y]
					if $window.height*GUI_SCALE+$y>WINDOW_YSIZE div 2
					{
						$window.drag_y+WINDOW_YSIZE div 2-$y-$window.height*GUI_SCALE
						$window.height=(WINDOW_YSIZE div 2-$y)/GUI_SCALE
					}
					else{if $window.height<$min_height
					{
						$window.drag_y+($min_height-$window.height)*GUI_SCALE
						$window.height=$min_height
					}}
				}
			}
			if !$resize&&$window.drag_x>=$x&&$window.drag_x<$x+$width&&$window.drag_y>=$y_border&&$window.drag_y<$y
			{
				$window.x+(EVT[EVT_X]-$window.drag_x)/GUI_SCALE
				$window.y+(EVT[EVT_Y]-$window.drag_y)/GUI_SCALE
				$window.drag_x=EVT[EVT_X]
				$window.drag_y=EVT[EVT_Y]
				$resize_x=get_global_x($window)
				$resize_y=get_global_y($window)
				if $resize_x<-WINDOW_XSIZE div 2
				{
					$window.x-($resize_x+WINDOW_XSIZE div 2)/GUI_SCALE
					$window.drag_x-$resize_x+WINDOW_XSIZE div 2
				}
				if $resize_y-60*GUI_SCALE-1<-WINDOW_YSIZE div 2
				{
					$window.y-($resize_y-1+WINDOW_YSIZE div 2)/GUI_SCALE-60
					$window.drag_y-$resize_y-60*GUI_SCALE-1+WINDOW_YSIZE div 2
				}
				if $width+$resize_x>WINDOW_XSIZE div 2
				{
					$window.x+(WINDOW_XSIZE div 2-$resize_x)/GUI_SCALE-$window.width
					$window.drag_x+WINDOW_XSIZE div 2-$resize_x-$width
				}
				if $height+$resize_y>WINDOW_YSIZE div 2
				{
					$window.y+(WINDOW_YSIZE div 2-$resize_y)/GUI_SCALE-$window.height
					$window.drag_y+WINDOW_YSIZE div 2-$resize_y-$height
				}
			}
		}
	}
	$a=get_size($window.buttons) while $a!=0
	{
		$a-1
		if $window.buttons[$a]>=0
		{
			$result=get_button_event($window.buttons[$a])
			if $result
			{
				if $window.type==WINDOW_ALERT||$window.type==WINDOW_DIALOG
				{
					remove_window($window, 0)
					ret
				}
			}
		}
	}
	if $window.parent.gui&&$window==$window.parent.windows[get_size($window.parent.windows)-1]&&EVT[EVT_TYPE]==EVT_MOUSEBUTTONDOWN&&(EVT[EVT_X]<$x||EVT[EVT_X]>=$x+$width||EVT[EVT_Y]<$y_border||EVT[EVT_Y]>=$y+$height)
	{
		$window.parent.window_focus=0
	}
}
/**
 * \brief Handles events of the button. Put this function in your event loop.
 * \param button
 * \return 1 if main event happened.
 * \see get_GUI_event()
 * \see get_window_event()
 * \see new_button()
 */
fn get_button_event($button)
{
	if $button.active
	{
		$do_it=0
		if EVT[EVT_KEY]==$button.keyboard_key
		{
			if EVT[EVT_TYPE]==EVT_BUTTONDOWN
			{
				$button.pressed=1
				if $button.main_event==EVT_BUTTONDOWN
				{
					$do_it=1
				}
			}
			if EVT[EVT_TYPE]==EVT_BUTTONUP
			{
				$button.pressed=0
				if $button.main_event==EVT_BUTTONUP
				{
					$do_it=1
				}
			}
		}
		if !$do_it
		{
			$x=get_global_x($button)
			$y=get_global_y($button)
		}
		if EVT[EVT_X]>=$x&&EVT[EVT_X]<$x+$button.width*GUI_SCALE&&EVT[EVT_Y]>=$y&&EVT[EVT_Y]<$y+$button.height*GUI_SCALE
		{
			if MOBILE||EVT[EVT_KEY]==$button.mouse_key
			{
				if EVT[EVT_TYPE]==EVT_MOUSEBUTTONDOWN||EVT[EVT_TYPE]==EVT_TOUCHBEGIN
				{
					$button.scancode=EVT[EVT_SCANCODE]
					$button.pressed=1
					$button.entered=1
					if $button.main_event==EVT_BUTTONDOWN
					{
						$do_it=1
					}
				}
				if EVT[EVT_TYPE]==EVT_MOUSEBUTTONUP||EVT[EVT_TYPE]==EVT_TOUCHEND&&EVT[EVT_SCANCODE]==$button.scancode
				{
					if $button.pressed
					{
						$button.pressed=0
						if $button.main_event==EVT_BUTTONUP
						{
							$do_it=1
						}
					}
					if MOBILE
					{
						$button.entered=0
					}
				}
			}
			if EVT[EVT_TYPE]==EVT_MOUSEMOVE||EVT[EVT_TYPE]==EVT_TOUCHMOVE
			{
				$button.scancode=EVT[EVT_SCANCODE]
				$button.entered=1
			}
		}
		else{if EVT[EVT_TYPE]==EVT_MOUSEMOVE||EVT[EVT_TYPE]==EVT_TOUCHMOVE&&EVT[EVT_SCANCODE]==$button.scancode
		{
			$button.entered=0
			$button.pressed=0
		}}
		if $do_it
		{
			if $button.type==BUTTON_SWITCH
			{
				$button.switch_state^1
			}
			$button.function($button, $button.arguments)
			if $button.type==BUTTON_SELECT
			{
				$button.selected=1
			}
			ret(1)
		}
	}
}
/**
 * \brief Draws elements bound to the GUI container.
 * \param gui a GUI container.
 * \see get_global_x()
 * \see get_global_y()
 * \see new_GUI()
 */
fn draw_GUI($gui)
{
	$a=0 while $a!=get_size($gui.texts)
	{
		if $gui.texts[$a]>=0
		{
			draw_text($gui.texts[$a])
		}
		$a+1
	}
	$a=0 while $a!=get_size($gui.images)
	{
		if $gui.images[$a]>=0
		{
			draw_image($gui.images[$a])
		}
		$a+1
	}
	$a=0 while $a!=get_size($gui.buttons)
	{
		if $gui.buttons[$a]>=0
		{
			draw_button($gui.buttons[$a])
		}
		$a+1
	}
	$a=0 while $a!=get_size($gui.windows)
	{
		if $gui.windows[$a]>=0
		{
			draw_window($gui.windows[$a])
		}
		$a+1
	}
}
/**
 * \brief Draws a window and its bound elements.
 * \param window
 * \see get_global_x()
 * \see get_global_y()
 * \see new_window()
 */
fn draw_window($window)
{
	$border_alpha=255
	$title_alpha=128
	$body_alpha=64
	$x=get_global_x($window)
	$y=get_global_y($window)
	$width=$window.width*GUI_SCALE
	$height=$window.height*GUI_SCALE
	$border=60*GUI_SCALE
	if $window.parent.gui
	{
		if $window.parent.window_focus
		{
			if $window.parent.windows[get_size($window.parent.windows)-1]!=$window
			{
				$color=get_color(128+get_red($window.color)*127 div 255, 128+get_green($window.color)*127 div 255, 128+get_blue($window.color)*127 div 255)
			}
			else
			{
				$color=$window.color
			}
		}
		else
		{
			$color=get_color(128+get_red($window.color)*127 div 255, 128+get_green($window.color)*127 div 255, 128+get_blue($window.color)*127 div 255)
		}
	}
	else
	{
		$color=$window.color
	}
	$transp=get_transp()
	transp($transp*$window.transp div 255)
	if COLOR_THEME==THEME_DARK
	{
		fbox($x+1, $y-$border, $width-2, $border, get_color(get_red($color)*$title_alpha div 255, get_green($color)*$title_alpha div 255, get_blue($color)*$title_alpha div 255))
	}
	else{if COLOR_THEME==THEME_LIGHT
	{
		fbox($x+1, $y-$border, $width-2, $border, get_color($title_alpha+get_red($color)*$title_alpha div 256, $title_alpha+get_green($color)*$title_alpha div 256, $title_alpha+get_blue($color)*$title_alpha div 256))
	}}
	transp(get_transp()*$body_alpha div 255)
	fbox($x+1, $y+1, $width-2, $height-2, $color)
	transp($transp*$window.transp div 255)
	$a=0 while $a!=get_size($window.texts)
	{
		if $a==0
		{
			if COLOR_THEME==THEME_LIGHT
			{
				$window.texts[$a].color=get_color(get_red($color)*64 div 255, get_green($color)*64 div 255, get_blue($color)*64 div 255)
			}
			$window.texts[$a].width=$window.width-2
			draw_text($window.texts[$a])
		}
		else{if $window.texts[$a]>=0
		{
			draw_text($window.texts[$a])
		}}
		$a+1
	}
	$a=0 while $a!=get_size($window.images)
	{
		if $window.images[$a]>=0
		{
			draw_image($window.images[$a])
		}
		$a+1
	}
	$a=0 while $a!=get_size($window.buttons)
	{
		if $window.buttons[$a]>=0
		{
			draw_button($window.buttons[$a])
		}
		$a+1
	}
	transp(get_transp()*$border_alpha div 255)
	box($x, $y-$border-1, $width-1, $height+$border, $color)
	line($x, $y, $x+$width-1, $y, $color)
	transp($transp)
}
/**
 * \brief Draws a text.
 * \param text
 * \see get_global_x()
 * \see get_global_y()
 * \see new_text()
 */
fn draw_text($text)
{
	$x=get_global_x($text)
	$y=get_global_y($text)
	t_scale($text.size*GUI_SCALE, $text.size*GUI_SCALE, 1)
	$transp=get_transp()
	transp($transp*$text.transp div 255)
	print($text.string, $x/$text.size/GUI_SCALE, $y/$text.size/GUI_SCALE, $text.color, $text.text_align, $text.width/$text.size)
	transp($transp)
	t_reset()
}
/**
 * \brief Draws an image.
 * \param image
 * \see get_global_x()
 * \see get_global_y()
 * \see new_image()
 */
fn draw_image($image)
{
	$x=get_global_x($image)
	$y=get_global_y($image)
	$width=$image.width*GUI_SCALE
	$height=$image.height*GUI_SCALE
	$transp=get_transp()
	transp($transp*$image.transp div 255)
	pixi($image.source, $x+$width div 2, $y+$height div 2, $image.color, $width/get_xsize($image.source), $height/get_ysize($image.source))
	transp($transp)
}
/**
 * \brief Draws a button.
 * \param button
 * \see get_global_x()
 * \see get_global_y()
 * \see new_button()
 */
fn draw_button($button)
{
	$x=get_global_x($button)
	$y=get_global_y($button)
	$width=$button.width*GUI_SCALE
	$height=$button.height*GUI_SCALE
	$border_alpha=255
	$body_alpha=64
	$normal=0
	$active=0
	if $button.parent.gui
	{
		$active=!$button.parent.window_focus
	}
	else{if $button.parent.window
	{
		if $button.parent.parent.gui
		{
			if $button.parent.parent.window_focus
			{
				if $button.parent.parent.windows[get_size($button.parent.parent.windows)-1]==$button.parent
				{
					$active=1
				}
			}
		}
		else
		{
			$active=1
		}
	}
	else
	{
		$active=1
	}}
	$active&&$button.active
	if $active
	{
		if $button.type==BUTTON_STANDARD
		{
			$normal=1
		}
		else{if $button.type==BUTTON_SWITCH
		{
			if $button.switch_state
			{
				$body_alpha=128
				if $button.pressed
				{
					$button_color=get_color(get_red($button.color)/255*128, get_green($button.color)/255*128, get_blue($button.color)/255*128)
				}
				else{if $button.entered
				{
					$button_color=get_color(get_red($button.color)/256*96+128, get_green($button.color)/256*96+128, get_blue($button.color)/256*96+128)
				}
				else
				{
					$button_color=get_color(get_red($button.color)/255*192, get_green($button.color)/255*192, get_blue($button.color)/255*192)
				}}
			}
			else
			{
				$normal=1
			}
		}
		else{if $button.type==BUTTON_SELECT
		{
			if $button.selected||$button.pressed
			{
				$normal=1
			}
			else
			{
				$border_alpha=0
				if $button.entered
				{
					$button_color=get_color(get_red($button.color)/256*128+128, get_green($button.color)/256*128+128, get_blue($button.color)/256*128+128)
				}
				else
				{
					$body_alpha=0
				}
			}
		}}}
		if $normal
		{
			if $button.pressed
			{
				$button_color=get_color(get_red($button.color)/255*128, get_green($button.color)/255*128, get_blue($button.color)/255*128)
			}
			else{if $button.entered
			{
				$button_color=get_color(get_red($button.color)/256*128+128, get_green($button.color)/256*128+128, get_blue($button.color)/256*128+128)
			}
			else
			{
				$button_color=$button.color
			}}
		}
	}
	else
	{
		$button_color=get_color(get_red($button.color)/256*128+128, get_green($button.color)/256*128+128, get_blue($button.color)/256*128+128)
	}
	$transp=get_transp()
	if $body_alpha!=0
	{
		transp($transp*$button.transp div 255*$body_alpha div 255)
		fbox($x+1, $y+1, $width-2, $height-2, $button_color)
	}
	transp($transp*$button.transp div 255)
	if COLOR_THEME==THEME_LIGHT
	{
		$button.title.color=get_color(get_red($button.color)*64 div 255, get_green($button.color)*64 div 255, get_blue($button.color)*64 div 255)
	}
	$button.title.width=$button.width-2
	draw_text($button.title)
	if $border_alpha!=0
	{
		transp(get_transp()*$border_alpha div 255)
		box($x, $y, $width-1, $height-1, $button_color)
	}
	transp($transp)
}